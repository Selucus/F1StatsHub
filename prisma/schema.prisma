// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]

  Comment     Comment[]
  CommentVote CommentVote[]
  Vote        Vote[]
}

model Raceweekend {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  charts    Chart[]

  @@index([name])

}




model Chart {
  id            String      @id @default(cuid())
  title         String
  imageUrl      String
  chartType     String
  createdAt     DateTime    @default(now())
  tags          ChartTag[]
  raceweekend   Raceweekend @relation(fields: [raceweekendId], references: [id])
  raceweekendId String

  comments Comment[]
  votes     Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chart     Chart    @relation(fields: [chartId], references: [id])
  chartId   String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  chart   Chart    @relation(fields: [chartId], references: [id])
  chartId String
  type    VoteType

  @@id([userId, chartId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model ChartTag {
  chart   Chart  @relation(fields: [chartId], references: [id])
  chartId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@id([chartId, tagId])
}

model Tag {
  id     String     @id @default(cuid())
  name   String     @unique
  charts ChartTag[]
}
